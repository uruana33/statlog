package assemble

import (
	"regexp"
	"statUpload/zkconfig"
	"strings"
)

//最后要上报给平台的数据格式
type uploadRawData struct {
	//总访问量
	REQTotal float64
	//返回码不为零的总量
	ErrorCount float64
	//成功率
	SuccRate float64
	//平均延时
	AvgTimeDelay float64
	//最大延时
	MaxTimeDelay float64
	//延时大于100ms比例
	GT100msRate float64
	//延时大于500ms比例
	GT500msRate float64
	//延时小于1000ms比例
	LT1000msRate float64
	//返回码明细
	RetCodeDetail map[int64]float64
}

type uploadRawDataKV struct {
	//该key访问量
	KVTotal float64
	//平均key大小
	KVAvgByte float64
	//最大key大小
	KVMaxByte float64
	//key大于1KB的比例
	KVGT1KBRate float64
	//key大于5KB的比例
	KVGT5KBRate float64
	//key小于10KB的比例
	KVLT10KBRate float64
}

type uploadNormal map[string]uploadRawData
type uploadSpecial map[string]*uploadRawDataKV

var REG = regexp.MustCompile(`[\d]+`)

func getCmdName(appidcmd string) (appid string, cmdword string) {
	aList := strings.SplitN(appidcmd, "_", 2)
	if 2 == len(aList) {
		if REG.MatchString(aList[0]) {
			appid = aList[0]
			cmdword = aList[1]
		} else {
			appid = "null"
			cmdword = appidcmd
		}
	} else {
		appid = "null"
		cmdword = appidcmd
	}
	return
}

func errNum(retCode int64, total float64, appidcmd string, biz string) float64 {

	serviceName := zkconfig.ServiceConfMap[biz]["srvName"]
	//从zk读取白名单配置
	//该命令字是否配有白名单
	if _, ok := zkconfig.WhiteListMap[serviceName]; ok {
		_, cmdword := getCmdName(appidcmd)
		if ignList, ok := zkconfig.WhiteListMap[serviceName][cmdword]; ok {
			found := false
			for _, value := range ignList {
				//白名单中是否存在该返回码
				if value == retCode {
					found = true
					break
				}
			}
			if !found {
				//有白名单,但是没加该返回码,所以错误码统计累计
				return total
			} else {
				//找到该白名单,忽略改返回码
				return 0.0
			}
		} else {
			//没有该命令字的白名单,所以错误码统计累计
			return total
		}
	} else {
		//没有该服务的白名单,所以错误码统计累计
		return total
	}
}

type normalStatPiece struct {
	appidcmd string
	statCont uploadRawData
}

type specialStatPiece struct {
	appidcmd string
	statCont uploadRawDataKV
}

func encapTypeNormal(records *statInfo, biz string, statBlock chan<- normalStatPiece) {

	//存放命令字信息
	tempElem := new(normalStatPiece)
	for appidcmd, retmap := range *records {

		tempElem.appidcmd = appidcmd
		var allsum float64 = 0.0
		var errsum float64 = 0.0
		var gt100ms float64 = 0.0
		var gt500ms float64 = 0.0
		var gt1000ms float64 = 0.0
		//处理该命令字下的所有返回码
		tempElem.statCont.RetCodeDetail = make(map[int64]float64, 0)
		for retCode, contStruc := range retmap {
			//返回码明细
			tempElem.statCont.RetCodeDetail[retCode] = contStruc.total / 60.0
			//总访问量
			allsum += contStruc.total
			//延时分布统计
			if 0 == retCode {
				gt100ms += contStruc.distri1 + contStruc.distri2 + contStruc.distri3
				gt500ms += contStruc.distri2 + contStruc.distri3
				gt1000ms += contStruc.distri3
				//平均值
				tempElem.statCont.AvgTimeDelay = contStruc.avg / contStruc.accNum
				//最大值
				tempElem.statCont.MaxTimeDelay = contStruc.max
			}
			if 0 != retCode {
				errsum += errNum(retCode, contStruc.total, appidcmd, biz)
			}
		}
		//针对该命令字的封装:tempElem结构
		tempElem.statCont.REQTotal = allsum / 60.0
		tempElem.statCont.ErrorCount = errsum / 60.0
		tempElem.statCont.SuccRate = (1 - errsum/allsum) * 100.0
		tempElem.statCont.GT100msRate = (gt100ms / allsum) * 100.0
		tempElem.statCont.GT500msRate = (gt500ms / allsum) * 100.0
		tempElem.statCont.LT1000msRate = (1 - gt1000ms/allsum) * 100.0
		statBlock <- *tempElem
	}
}

func encapTypeSpecial(records *statInfo, biz string, statBlock chan<- specialStatPiece) {

	//存放命令字信息
	tempElem := new(specialStatPiece)
	for appidcmd, retmap := range *records {
		if "ALL" == appidcmd {
			continue
		}
		var allsum float64 = 0.0
		var ge1KB float64 = 0.0
		var ge5KB float64 = 0.0
		var ge10KB float64 = 0.0
		//处理该命令字下的所有返回码
		for retCode, contStruc := range retmap {
			//总访问量
			allsum += contStruc.total
			//Key大小分布统计
			if 0 == retCode {
				ge1KB += contStruc.distri1 + contStruc.distri2 + contStruc.distri3
				ge5KB += contStruc.distri2 + contStruc.distri3
				ge10KB += contStruc.distri3
				//平均值
				tempElem.statCont.KVAvgByte = contStruc.avg / contStruc.accNum
				//最大值
				tempElem.statCont.KVMaxByte = contStruc.max
			}
		}
		//针对该命令字的封装:tempElem结构
		tempElem.appidcmd = appidcmd
		tempElem.statCont.KVTotal = allsum / 60.0
		tempElem.statCont.KVGT1KBRate = (ge1KB / allsum) * 100.0
		tempElem.statCont.KVGT5KBRate = (ge5KB / allsum) * 100.0
		tempElem.statCont.KVLT10KBRate = (1 - ge10KB/allsum) * 100.0
		statBlock <- *tempElem
	}
}
